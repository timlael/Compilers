***************************************************************************************************
*									 CS4280 Project 1 README                                      *
*                                    Lexical Analyzer/Scanner                                     *
*                                          Tim M. Lael                                            *
*                                          CS4280  e01                                            *
*                                          02/26/2017                                             *
*                                                                                                 *
*                  		Project requirements and implementation description                       *
*                                                                                                 *
***************************************************************************************************
FSA Table + Driver (100) submission. Table declaration, definition and description can be found
within scanner.h and scanner.c files. Table description will follow below.

per project requirements, the program is invoked by calling the testScanner executable from the 
shell prompt. Optionally, a file may be passed as an argument by invoking using testScanner [file].
The input file, if used, has an implicit extension of .4280E01. Proper invocation using a file
named input.4280E01 would be testScanner input, not testScanner input.4280E01.
Without a file argument, input will be read from the keyboard(stdin). Alternatively, file
redirection can also be used to read from stdin by redirecting an explicitly named file
e.g. - testScanner < file.extension.


Lexical Definition
***************************************************************************************************
Acceptable alphabet:
L = [a-zA-Z] D = [0-9] and special characters = << >> =! == : + - * / & % . ( ) , { } ; [ ] 
Reserved keywords:
start stop decision while void int return read print program
Identifiers:
L(L)*
no identifier is longer than 8
Integers:
D(D)*
no integer is longer than 8
Comment:
starts with # and ends with WS (no regex, just empty loop until WS encountered)
***************************************************************************************************

/* 
   	DFA Table
   	transient states are low integers 0 - 21
   	errors are negative integers
   	final states are high integers 500 - 522
	final states are mapped to tokens below
*/
int DFAStateTable[22][24] = {
/*  L    D    =    <    >    :    +    -    *    /    &    %    .    (    )    ,    {    }    ;    [    ]    !   WS  EOF */
 {  1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  -2,   0,  -1}, // 0
 {  1, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500, 500}, // 1
 {501,   2, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501, 501}, // 2
 {502, 502, 503, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 502, 504, 502, 502}, // 3
 { -2,  -2,  -2, 505,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2}, // 4
 { -2,  -2,  -2,  -2, 506,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2,  -2}, // 5
 {507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507, 507}, // 6
 {508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508, 508}, // 7
 {509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509, 509}, // 8
 {510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510, 510}, // 9
 {511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511, 511}, // 10
 {512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512, 512}, // 11
 {513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513, 513}, // 12
 {514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514, 514}, // 13
 {515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515, 515}, // 14
 {516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516, 516}, // 15
 {517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517, 517}, // 16
 {518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518, 518}, // 17
 {519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519, 519}, // 18
 {520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520, 520}, // 19
 {521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521, 521}, // 20
 {522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522, 522}  // 21
};
